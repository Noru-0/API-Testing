{
  "info": {
    "name": "Categories API Collection",
    "description": "Collection for testing GET /categories/tree API endpoint",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET Categories Tree",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Enhanced test cases for GET /categories/tree with testing techniques",
              "const testCase = pm.iterationData.get('test_case');",
              "const technique = pm.iterationData.get('technique');",
              "const expectedStatus = parseInt(pm.iterationData.get('expected_status'));",
              "const description = pm.iterationData.get('description');",
              "const validationFocus = pm.iterationData.get('validation_focus');",
              "",
              "console.log(`Running test: ${testCase} - ${description} (${technique})`);",
              "",
              "// Status Code Validation based on expected result",
              "pm.test(`${technique}: Status code should be ${expectedStatus}`, function () {",
              "    pm.response.to.have.status(expectedStatus);",
              "});",
              "",
              "// Response Time Performance Testing",
              "pm.test(`${technique}: Response time is acceptable`, function () {",
              "    const responseTime = pm.response.responseTime;",
              "    if (expectedStatus === 200) {",
              "        pm.expect(responseTime).to.be.below(3000, 'Valid requests should respond quickly');",
              "    } else {",
              "        pm.expect(responseTime).to.be.below(5000, 'Error responses should still be timely');",
              "    }",
              "});",
              "",
              "// Content-Type Validation",
              "pm.test(`${technique}: Response has correct content-type`, function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "// Positive Test Cases (200 responses)",
              "if (expectedStatus === 200) {",
              "    pm.test(`${technique}: Response body is valid JSON`, function () {",
              "        pm.response.to.be.json;",
              "    });",
              "",
              "    pm.test(`${technique}: Categories tree structure validation`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.be.an('array');",
              "    });",
              "",
              "    // Validation Focus specific tests",
              "    if (validationFocus === 'tree_structure') {",
              "        pm.test('Validation: Tree structure integrity', function () {",
              "            const responseJson = pm.response.json();",
              "            if (responseJson.length > 0) {",
              "                responseJson.forEach(category => {",
              "                    pm.expect(category).to.have.property('id');",
              "                    pm.expect(category).to.have.property('name');",
              "                    pm.expect(category.id).to.be.a('number');",
              "                    pm.expect(category.name).to.be.a('string');",
              "                    ",
              "                    // Check subcategories if present",
              "                    if (category.subcategories) {",
              "                        pm.expect(category.subcategories).to.be.an('array');",
              "                        category.subcategories.forEach(subcat => {",
              "                            pm.expect(subcat).to.have.property('id');",
              "                            pm.expect(subcat).to.have.property('name');",
              "                            pm.expect(subcat).to.have.property('parent_id');",
              "                            pm.expect(subcat.parent_id).to.equal(category.id);",
              "                        });",
              "                    }",
              "                });",
              "            }",
              "        });",
              "    }",
              "",
              "    if (validationFocus === 'parent_child_relations') {",
              "        pm.test('Validation: Parent-child relationships', function () {",
              "            const responseJson = pm.response.json();",
              "            responseJson.forEach(category => {",
              "                if (category.subcategories && category.subcategories.length > 0) {",
              "                    category.subcategories.forEach(subcat => {",
              "                        pm.expect(subcat.parent_id).to.equal(category.id);",
              "                    });",
              "                }",
              "            });",
              "        });",
              "    }",
              "",
              "    if (validationFocus === 'all_required_fields') {",
              "        pm.test('Validation: All required fields present', function () {",
              "            const responseJson = pm.response.json();",
              "            responseJson.forEach(category => {",
              "                pm.expect(category).to.have.property('id');",
              "                pm.expect(category).to.have.property('name');",
              "                pm.expect(category.id).to.not.be.null;",
              "                pm.expect(category.name).to.not.be.empty;",
              "            });",
              "        });",
              "    }",
              "",
              "    if (validationFocus === 'data_integrity') {",
              "        pm.test('Validation: Data consistency check', function () {",
              "            const responseJson = pm.response.json();",
              "            const categoryIds = new Set();",
              "            ",
              "            responseJson.forEach(category => {",
              "                // Check for duplicate IDs",
              "                pm.expect(categoryIds.has(category.id)).to.be.false;",
              "                categoryIds.add(category.id);",
              "                ",
              "                // Check subcategory IDs don't conflict",
              "                if (category.subcategories) {",
              "                    category.subcategories.forEach(subcat => {",
              "                        pm.expect(categoryIds.has(subcat.id)).to.be.false;",
              "                        categoryIds.add(subcat.id);",
              "                    });",
              "                }",
              "            });",
              "        });",
              "    }",
              "",
              "    // EP specific validations",
              "    if (technique === 'EP') {",
              "        pm.test('EP: Equivalence class validation', function () {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('array');",
              "            // All categories should have consistent structure",
              "            responseJson.forEach(category => {",
              "                pm.expect(category.id).to.be.a('number');",
              "                pm.expect(category.name).to.be.a('string');",
              "            });",
              "        });",
              "    }",
              "",
              "    // BVA specific validations",
              "    if (technique === 'BVA') {",
              "        pm.test('BVA: Boundary parameter handling', function () {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('array');",
              "            // Verify response structure is maintained at boundaries",
              "        });",
              "    }",
              "",
              "    // Performance validations",
              "    if (validationFocus === 'response_time') {",
              "        pm.test('Performance: Response time benchmark', function () {",
              "            pm.expect(pm.response.responseTime).to.be.below(2000);",
              "        });",
              "    }",
              "",
              "    if (validationFocus === 'system_stability') {",
              "        pm.test('Performance: System stability check', function () {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('array');",
              "            pm.expect(pm.response.responseTime).to.be.below(5000);",
              "        });",
              "    }",
              "}",
              "",
              "// Negative Test Cases (400 responses)",
              "if (expectedStatus === 400) {",
              "    pm.test(`${technique}: Bad request error handling`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('message');",
              "    });",
              "",
              "    pm.test(`${technique}: Error response structure`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson.message).to.be.a('string');",
              "        pm.expect(responseJson.message.length).to.be.above(0);",
              "    });",
              "",
              "    // Security validation for negative tests",
              "    if (technique === 'Negative') {",
              "        pm.test('Security: No sensitive data in error response', function () {",
              "            const responseText = pm.response.text();",
              "            pm.expect(responseText).to.not.include('password');",
              "            pm.expect(responseText).to.not.include('token');",
              "            pm.expect(responseText).to.not.include('secret');",
              "            pm.expect(responseText).to.not.include('database');",
              "        });",
              "",
              "        // XSS and SQL injection protection",
              "        if (testCase.includes('xss') || testCase.includes('sql_injection')) {",
              "            pm.test('Security: Injection attempt properly blocked', function () {",
              "                const responseText = pm.response.text();",
              "                pm.expect(responseText).to.not.include('<script');",
              "                pm.expect(responseText).to.not.include('DROP TABLE');",
              "                pm.expect(responseText).to.not.include('SELECT *');",
              "            });",
              "        }",
              "    }",
              "}",
              "",
              "// Combinatorial Testing specific validations",
              "if (technique === 'Combinatorial') {",
              "    pm.test('Combinatorial: Parameter combination testing', function () {",
              "        const queryParam = pm.iterationData.get('query_param');",
              "        const filterParam = pm.iterationData.get('filter_param');",
              "        ",
              "        console.log(`Testing parameter combination: query=${queryParam}, filter=${filterParam}`);",
              "        ",
              "        if (expectedStatus === 200) {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('array');",
              "        }",
              "    });",
              "}",
              "",
              "// Edge Case Testing",
              "if (technique === 'Edge') {",
              "    pm.test('Edge: Special scenario handling', function () {",
              "        if (validationFocus === 'unicode_support') {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('array');",
              "        }",
              "        ",
              "        if (validationFocus === 'consistency') {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('array');",
              "        }",
              "    });",
              "}",
              "",
              "// Performance Monitoring",
              "pm.test('Performance: Response size is reasonable', function () {",
              "    const responseSize = pm.response.responseSize;",
              "    pm.expect(responseSize).to.be.below(512 * 1024, 'Response should be under 512KB');",
              "});",
              "",
              "// Cache validation",
              "pm.test('Caching: Appropriate cache headers', function () {",
              "    // Categories tree doesn't change frequently, should be cacheable",
              "    const cacheControl = pm.response.headers.get('Cache-Control');",
              "    if (cacheControl) {",
              "        console.log(`Cache-Control: ${cacheControl}`);",
              "    }",
              "});",
              "",
              "// Log test results for analysis",
              "console.log(`Test completed: ${testCase} | Status: ${pm.response.code} | Time: ${pm.response.responseTime}ms | Technique: ${technique} | Focus: ${validationFocus}`);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "{{content_type}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/categories/tree",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "categories",
            "tree"
          ]
        }
      },
      "response": []
    }
  ],
  "variable": []
}

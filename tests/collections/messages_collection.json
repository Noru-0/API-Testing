{
  "info": {
    "name": "Messages API Collection",
    "description": "Collection for testing POST /messages API endpoint",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get Authentication Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Extract token from login response",
              "if (pm.response.code === 200) {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.token) {",
              "        pm.collectionVariables.set('auth_token', responseJson.token);",
              "        console.log('‚úÖ Authentication token obtained successfully');",
              "    } else if (responseJson.access_token) {",
              "        pm.collectionVariables.set('auth_token', responseJson.access_token);",
              "        console.log('‚úÖ Authentication access_token obtained successfully');",
              "    } else {",
              "        console.log('‚ö†Ô∏è No token found in response, proceeding without authentication');",
              "    }",
              "} else {",
              "    console.log('‚ö†Ô∏è Authentication failed, proceeding without token');",
              "    // Set empty token to continue testing",
              "    pm.collectionVariables.set('auth_token', '');",
              "}",
              "",
              "// Test authentication endpoint",
              "pm.test('Authentication endpoint accessibility', function () {",
              "    // Even if auth fails, the endpoint should be reachable",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 422]);",
              "});",
              "",
              "pm.test('Response time is acceptable for auth', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \\\"email\\\": \\\"{{auth_email}}\\\",\\n  \\\"password\\\": \\\"{{auth_password}}\\\"\\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "auth",
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "POST Send Message",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if we have authentication token",
              "const authToken = pm.collectionVariables.get('auth_token');",
              "if (authToken && authToken !== '') {",
              "    console.log('üîë Using authentication token for request');",
              "} else {",
              "    console.log('‚ö†Ô∏è No authentication token available, testing without auth');",
              "}",
              "",
              "// Generate dynamic data if needed",
              "const testData = pm.iterationData.toObject();",
              "if (testData.email && testData.email.includes('{{timestamp}}')) {",
              "    const timestamp = Date.now();",
              "    pm.collectionVariables.set('timestamp', timestamp);",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Enhanced test cases for POST /messages with testing techniques",
              "const testCase = pm.iterationData.get('test_case');",
              "const technique = pm.iterationData.get('technique');",
              "const expectedStatus = parseInt(pm.iterationData.get('expected_status'));",
              "const description = pm.iterationData.get('description');",
              "const authToken = pm.collectionVariables.get('auth_token');",
              "",
              "console.log(`Running test: ${testCase} - ${description} (${technique})`);",
              "",
              "// Authentication Status Check",
              "pm.test('Authentication status check', function () {",
              "    if (authToken && authToken !== '') {",
              "        console.log('‚úÖ Request sent with authentication token');",
              "    } else {",
              "        console.log('‚ö†Ô∏è Request sent without authentication token');",
              "    }",
              "    // This test always passes, just for logging",
              "    pm.expect(true).to.be.true;",
              "});",
              "",
              "// Handle Authentication Requirements",
              "if (pm.response.code === 401) {",
              "    pm.test('Authentication required - 401 Unauthorized', function () {",
              "        pm.response.to.have.status(401);",
              "        console.log('üîí API requires authentication - got 401 Unauthorized');",
              "    });",
              "    ",
              "    pm.test('Unauthorized response structure', function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('message');",
              "    });",
              "    ",
              "    // Skip other tests if authentication is required but not provided",
              "    console.log('‚ö†Ô∏è Skipping detailed tests due to authentication requirement');",
              "    return;",
              "}",
              "",
              "// Status Code Validation based on expected result",
              "pm.test(`${technique}: Status code should be ${expectedStatus}`, function () {",
              "    // Adjust expected status if we don't have auth token",
              "    if (!authToken || authToken === '') {",
              "        // If API requires auth and we don't have token, expect 401",
              "        if (pm.response.code === 401) {",
              "            pm.response.to.have.status(401);",
              "            return;",
              "        }",
              "    }",
              "    pm.response.to.have.status(expectedStatus);",
              "});",
              "",
              "// Response Time Performance Testing",
              "pm.test(`${technique}: Response time is acceptable`, function () {",
              "    const responseTime = pm.response.responseTime;",
              "    if (expectedStatus === 201) {",
              "        pm.expect(responseTime).to.be.below(5000, 'Success responses should be reasonably fast');",
              "    } else {",
              "        pm.expect(responseTime).to.be.below(3000, 'Error responses should be faster');",
              "    }",
              "});",
              "",
              "// Content-Type Validation",
              "pm.test(`${technique}: Response has correct content-type`, function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "// Positive Test Cases (201 responses)",
              "if (expectedStatus === 201) {",
              "    pm.test(`${technique}: Successful message creation validation`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('id');",
              "        pm.expect(responseJson.id).to.be.a('number');",
              "        pm.expect(responseJson.id).to.be.above(0);",
              "    });",
              "",
              "    pm.test(`${technique}: Response contains submitted data`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('first_name');",
              "        pm.expect(responseJson).to.have.property('last_name');",
              "        pm.expect(responseJson).to.have.property('email');",
              "        pm.expect(responseJson).to.have.property('subject');",
              "        pm.expect(responseJson).to.have.property('message');",
              "    });",
              "",
              "    pm.test(`${technique}: Timestamps are present`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('created_at');",
              "        pm.expect(responseJson).to.have.property('updated_at');",
              "    });",
              "",
              "    // EP specific validations for valid data",
              "    if (technique === 'EP') {",
              "        pm.test('EP: Valid equivalence class verification', function () {",
              "            const responseJson = pm.response.json();",
              "            const firstName = pm.iterationData.get('first_name');",
              "            const lastName = pm.iterationData.get('last_name');",
              "            const email = pm.iterationData.get('email');",
              "            ",
              "            pm.expect(responseJson.first_name).to.equal(firstName);",
              "            pm.expect(responseJson.last_name).to.equal(lastName);",
              "            pm.expect(responseJson.email).to.equal(email);",
              "        });",
              "    }",
              "",
              "    // BVA specific validations for boundary values",
              "    if (technique === 'BVA') {",
              "        pm.test('BVA: Boundary value acceptance validation', function () {",
              "            const responseJson = pm.response.json();",
              "            const firstName = pm.iterationData.get('first_name');",
              "            const lastName = pm.iterationData.get('last_name');",
              "            ",
              "            // Verify boundary values are accepted and stored correctly",
              "            if (firstName) pm.expect(responseJson.first_name).to.equal(firstName);",
              "            if (lastName) pm.expect(responseJson.last_name).to.equal(lastName);",
              "        });",
              "    }",
              "",
              "    // Edge case validations",
              "    if (technique === 'Edge') {",
              "        pm.test('Edge: Special character handling validation', function () {",
              "            const responseJson = pm.response.json();",
              "            // Verify that unicode/special characters are preserved",
              "            pm.expect(responseJson.first_name).to.be.a('string');",
              "            pm.expect(responseJson.last_name).to.be.a('string');",
              "        });",
              "    }",
              "}",
              "",
              "// Negative Test Cases (422 responses)",
              "if (expectedStatus === 422) {",
              "    pm.test(`${technique}: Validation error response structure`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('message');",
              "        pm.expect(responseJson).to.have.property('errors');",
              "        pm.expect(responseJson.errors).to.be.an('object');",
              "    });",
              "",
              "    pm.test(`${technique}: Specific field validation errors`, function () {",
              "        const responseJson = pm.response.json();",
              "        const firstName = pm.iterationData.get('first_name');",
              "        const lastName = pm.iterationData.get('last_name');",
              "        const email = pm.iterationData.get('email');",
              "        const subject = pm.iterationData.get('subject');",
              "        const message = pm.iterationData.get('message');",
              "        ",
              "        // Check which fields should have errors",
              "        if (!firstName || firstName.trim() === '') {",
              "            pm.expect(responseJson.errors).to.have.property('first_name');",
              "        }",
              "        if (!lastName || lastName.trim() === '') {",
              "            pm.expect(responseJson.errors).to.have.property('last_name');",
              "        }",
              "        if (!email || email.trim() === '') {",
              "            pm.expect(responseJson.errors).to.have.property('email');",
              "        }",
              "        if (!subject || subject.trim() === '') {",
              "            pm.expect(responseJson.errors).to.have.property('subject');",
              "        }",
              "        if (!message || message.trim() === '') {",
              "            pm.expect(responseJson.errors).to.have.property('message');",
              "        }",
              "    });",
              "",
              "    // BVA specific error validations",
              "    if (technique === 'BVA') {",
              "        pm.test('BVA: Boundary violation error messages', function () {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson.message).to.include.oneOf(['validation', 'invalid', 'required']);",
              "        });",
              "    }",
              "",
              "    // Negative testing validations",
              "    if (technique === 'Negative') {",
              "        pm.test('Negative: Proper error handling for invalid input', function () {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson.errors).to.not.be.empty;",
              "            // Ensure errors are descriptive",
              "            Object.values(responseJson.errors).forEach(errorArray => {",
              "                pm.expect(errorArray).to.be.an('array');",
              "                pm.expect(errorArray.length).to.be.above(0);",
              "            });",
              "        });",
              "",
              "        // Security validation for injection attempts",
              "        if (testCase.includes('sql_injection') || testCase.includes('xss')) {",
              "            pm.test('Security: Injection attempt properly blocked', function () {",
              "                const responseText = pm.response.text();",
              "                pm.expect(responseText).to.not.include('<script');",
              "                pm.expect(responseText).to.not.include('DROP TABLE');",
              "                pm.expect(responseText).to.not.include('SELECT * FROM');",
              "            });",
              "        }",
              "    }",
              "}",
              "",
              "// Bad Request Test Cases (400 responses)",
              "if (expectedStatus === 400) {",
              "    pm.test(`${technique}: Bad request handling`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('message');",
              "    });",
              "",
              "    pm.test(`${technique}: Security validation for malformed requests`, function () {",
              "        const responseText = pm.response.text();",
              "        pm.expect(responseText).to.not.include('password');",
              "        pm.expect(responseText).to.not.include('token');",
              "        pm.expect(responseText).to.not.include('secret');",
              "    });",
              "}",
              "",
              "// Combinatorial Testing specific validations",
              "if (technique === 'Combinatorial') {",
              "    pm.test('Combinatorial: Multiple field interaction validation', function () {",
              "        const firstName = pm.iterationData.get('first_name');",
              "        const lastName = pm.iterationData.get('last_name');",
              "        const email = pm.iterationData.get('email');",
              "        ",
              "        console.log(`Testing field combination: firstName=${firstName}, lastName=${lastName}, email=${email}`);",
              "        ",
              "        if (expectedStatus === 201) {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.have.property('id');",
              "        } else {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.have.property('errors');",
              "        }",
              "    });",
              "}",
              "",
              "// Performance and Load Testing",
              "pm.test('Performance: Response size is reasonable', function () {",
              "    const responseSize = pm.response.responseSize;",
              "    pm.expect(responseSize).to.be.below(10240, 'Response should be under 10KB');",
              "});",
              "",
              "pm.test('Performance: No memory leaks in headers', function () {",
              "    const headers = pm.response.headers;",
              "    pm.expect(headers.get('Content-Length')).to.exist;",
              "});",
              "",
              "// Log test results for analysis",
              "const requestBody = pm.request.body ? pm.request.body.raw : 'No body';",
              "console.log(`Test completed: ${testCase} | Status: ${pm.response.code} | Time: ${pm.response.responseTime}ms | Technique: ${technique}`);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "{{content_type}}"
          },
          {
            "key": "Accept",
            "value": "{{content_type}}"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "description": "JWT Bearer token for authentication"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \\\"first_name\\\": \\\"{{first_name}}\\\",\\n  \\\"last_name\\\": \\\"{{last_name}}\\\",\\n  \\\"email\\\": \\\"{{email}}\\\",\\n  \\\"subject\\\": \\\"{{subject}}\\\",\\n  \\\"message\\\": \\\"{{message}}\\\"\\n}"
        },
        "url": {
          "raw": "{{base_url}}/messages",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "messages"
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "auth_token",
      "value": "",
      "description": "JWT authentication token"
    },
    {
      "key": "first_name",
      "value": ""
    },
    {
      "key": "last_name",
      "value": ""
    },
    {
      "key": "email",
      "value": ""
    },
    {
      "key": "subject",
      "value": ""
    },
    {
      "key": "message",
      "value": ""
    }
  ]
}

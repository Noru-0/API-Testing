{
  "info": {
    "name": "Products API Collection",
    "description": "Collection for testing GET /products API endpoint",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET All Products",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Clear previous test data",
              "pm.collectionVariables.clear();"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Enhanced test cases for GET /products with testing techniques",
              "const testCase = pm.iterationData.get('test_case');",
              "const technique = pm.iterationData.get('technique');",
              "const expectedStatus = parseInt(pm.iterationData.get('expected_status'));",
              "const description = pm.iterationData.get('description');",
              "",
              "console.log(`Running test: ${testCase} - ${description} (${technique})`);",
              "",
              "// Status Code Validation based on expected result",
              "pm.test(`${technique}: Status code should be ${expectedStatus}`, function () {",
              "    pm.response.to.have.status(expectedStatus);",
              "});",
              "",
              "// Response Time Performance Testing",
              "pm.test(`${technique}: Response time is acceptable`, function () {",
              "    const responseTime = pm.response.responseTime;",
              "    if (expectedStatus === 200) {",
              "        pm.expect(responseTime).to.be.below(3000, 'Valid requests should respond quickly');",
              "    } else {",
              "        pm.expect(responseTime).to.be.below(5000, 'Error responses should still be timely');",
              "    }",
              "});",
              "",
              "// Content-Type Validation",
              "pm.test(`${technique}: Response has correct content-type`, function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "// Positive Test Cases (200 responses)",
              "if (expectedStatus === 200) {",
              "    pm.test(`${technique}: Response body is valid JSON`, function () {",
              "        pm.response.to.be.json;",
              "    });",
              "",
              "    pm.test(`${technique}: Response contains products data structure`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('data');",
              "        pm.expect(responseJson.data).to.be.an('array');",
              "    });",
              "",
              "    pm.test(`${technique}: Pagination metadata validation`, function () {",
              "        const responseJson = pm.response.json();",
              "        // Check for pagination info",
              "        if (responseJson.meta) {",
              "            pm.expect(responseJson.meta).to.have.property('current_page');",
              "            pm.expect(responseJson.meta).to.have.property('per_page');",
              "            pm.expect(responseJson.meta).to.have.property('total');",
              "        }",
              "    });",
              "",
              "    pm.test(`${technique}: Products have required fields`, function () {",
              "        const responseJson = pm.response.json();",
              "        if (responseJson.data && responseJson.data.length > 0) {",
              "            const product = responseJson.data[0];",
              "            pm.expect(product).to.have.property('id');",
              "            pm.expect(product).to.have.property('name');",
              "            pm.expect(product).to.have.property('price');",
              "        }",
              "    });",
              "",
              "    // BVA specific validations",
              "    if (technique === 'BVA') {",
              "        pm.test('BVA: Boundary value handling validation', function () {",
              "            const responseJson = pm.response.json();",
              "            const page = pm.iterationData.get('page');",
              "            const limit = pm.iterationData.get('limit');",
              "            ",
              "            if (responseJson.meta) {",
              "                if (page) pm.expect(responseJson.meta.current_page).to.equal(parseInt(page));",
              "                if (limit) pm.expect(responseJson.meta.per_page).to.equal(parseInt(limit));",
              "            }",
              "        });",
              "    }",
              "",
              "    // EP specific validations",
              "    if (technique === 'EP') {",
              "        pm.test('EP: Equivalence class validation', function () {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson.data).to.be.an('array');",
              "            // Validate that all products in response belong to same equivalence class",
              "            responseJson.data.forEach(product => {",
              "                pm.expect(product.id).to.be.a('number');",
              "                pm.expect(product.name).to.be.a('string');",
              "                pm.expect(product.price).to.be.a('number');",
              "            });",
              "        });",
              "    }",
              "}",
              "",
              "// Negative Test Cases (400/422 responses)",
              "if (expectedStatus >= 400) {",
              "    pm.test(`${technique}: Error response structure validation`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson).to.have.property('message');",
              "        // Error responses should have proper structure",
              "    });",
              "",
              "    pm.test(`${technique}: Negative test - proper error handling`, function () {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson.message).to.be.a('string');",
              "        pm.expect(responseJson.message.length).to.be.above(0);",
              "    });",
              "",
              "    // Security validation for negative tests",
              "    if (testCase.includes('neg_')) {",
              "        pm.test('Security: No sensitive data in error response', function () {",
              "            const responseText = pm.response.text();",
              "            pm.expect(responseText).to.not.include('password');",
              "            pm.expect(responseText).to.not.include('token');",
              "            pm.expect(responseText).to.not.include('secret');",
              "        });",
              "    }",
              "}",
              "",
              "// Combinatorial Testing specific validations",
              "if (technique === 'Combinatorial') {",
              "    pm.test('Combinatorial: Parameter interaction validation', function () {",
              "        const page = pm.iterationData.get('page');",
              "        const limit = pm.iterationData.get('limit');",
              "        ",
              "        console.log(`Testing combination: page=${page}, limit=${limit}`);",
              "        // Validate that parameter combinations work as expected",
              "        if (expectedStatus === 200) {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson.data).to.be.an('array');",
              "        }",
              "    });",
              "}",
              "",
              "// Performance tracking",
              "pm.test('Performance: Response size is reasonable', function () {",
              "    const responseSize = pm.response.responseSize;",
              "    pm.expect(responseSize).to.be.below(1024 * 1024, 'Response should be under 1MB');",
              "});",
              "",
              "// Log test results for analysis",
              "console.log(`Test completed: ${testCase} | Status: ${pm.response.code} | Time: ${pm.response.responseTime}ms | Technique: ${technique}`);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "{{content_type}}"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}",
            "description": "Optional JWT Bearer token",
            "disabled": true
          }
        ],
        "url": {
          "raw": "{{base_url}}/products?page={{page}}&limit={{limit}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "products"
          ],
          "query": [
            {
              "key": "page",
              "value": "{{page}}",
              "description": "Page number for pagination"
            },
            {
              "key": "limit",
              "value": "{{limit}}",
              "description": "Number of items per page"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "page",
      "value": "1"
    },
    {
      "key": "limit",
      "value": "10"
    }
  ]
}

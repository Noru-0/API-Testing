{
  "info": {
    "name": "Categories Tree API Data-Driven Tests",
    "description": "Data-driven tests for Categories Tree API using CSV test data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "GET /categories/tree - Data-Driven Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const expectedStatus = parseInt(pm.iterationData.get('expected_status'));",
              "const testScenario = pm.iterationData.get('test_scenario');",
              "const description = pm.iterationData.get('test_description');",
              "const categorySlug = pm.iterationData.get('category_slug');",
              "",
              "pm.test(`${description} - Status Code`, function () {",
              "    pm.expect(pm.response.code).to.equal(expectedStatus);",
              "});",
              "",
              "pm.test(`${description} - Response Time`, function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test(`${description} - Content Type`, function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "if (expectedStatus === 200) {",
              "    pm.test(`${description} - Valid Tree Response Structure`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.be.an('array');",
              "        ",
              "        if (json.length > 0) {",
              "            // Check root level category structure",
              "            pm.expect(json[0]).to.have.property('id');",
              "            pm.expect(json[0]).to.have.property('name');",
              "            pm.expect(json[0]).to.have.property('slug');",
              "            pm.expect(json[0]).to.have.property('parent_id');",
              "            pm.expect(json[0]).to.have.property('sub_categories');",
              "            pm.expect(json[0].sub_categories).to.be.an('array');",
              "        }",
              "    });",
              "    ",
              "    pm.test(`${description} - Tree Structure Validation`, function () {",
              "        const json = pm.response.json();",
              "        ",
              "        if (json.length > 0) {",
              "            // Validate that root categories have null parent_id",
              "            json.forEach(category => {",
              "                if (category.parent_id === null) {",
              "                    pm.expect(category.parent_id).to.be.null;",
              "                }",
              "                ",
              "                // Validate sub_categories structure if present",
              "                if (category.sub_categories && category.sub_categories.length > 0) {",
              "                    category.sub_categories.forEach(subCategory => {",
              "                        pm.expect(subCategory).to.have.property('id');",
              "                        pm.expect(subCategory).to.have.property('name');",
              "                        pm.expect(subCategory).to.have.property('slug');",
              "                        pm.expect(subCategory).to.have.property('parent_id');",
              "                        pm.expect(subCategory.parent_id).to.equal(category.id);",
              "                    });",
              "                }",
              "            });",
              "        }",
              "    });",
              "    ",
              "    pm.test(`${description} - Category Slug Filter Validation`, function () {",
              "        const json = pm.response.json();",
              "        ",
              "        if (categorySlug && categorySlug !== '') {",
              "            // When filtering by slug, should only return that specific category tree",
              "            if (json.length > 0) {",
              "                pm.expect(json[0].slug).to.equal(categorySlug);",
              "            }",
              "        }",
              "    });",
              "} else if (expectedStatus === 404) {",
              "    pm.test(`${description} - Not Found Response`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.have.property('message');",
              "    });",
              "} else {",
              "    pm.test(`${description} - Error Response Structure`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.have.property('message');",
              "    });",
              "}",
              "",
              "// Security test validations",
              "if (testScenario.includes('security')) {",
              "    pm.test(`${description} - No SQL Error Exposed`, function () {",
              "        const responseText = pm.response.text().toLowerCase();",
              "        pm.expect(responseText).to.not.include('sql');",
              "        pm.expect(responseText).to.not.include('mysql');",
              "        pm.expect(responseText).to.not.include('syntax error');",
              "    });",
              "    ",
              "    pm.test(`${description} - No Script Execution`, function () {",
              "        const responseText = pm.response.text();",
              "        pm.expect(responseText).to.not.include('<script>');",
              "        pm.expect(responseText).to.not.include('javascript:');",
              "    });",
              "    ",
              "    pm.test(`${description} - No Sensitive Data Leak`, function () {",
              "        const responseText = pm.response.text().toLowerCase();",
              "        pm.expect(responseText).to.not.include('password');",
              "        pm.expect(responseText).to.not.include('token');",
              "        pm.expect(responseText).to.not.include('secret');",
              "    });",
              "}",
              "",
              "// Performance validation for large datasets",
              "if (testScenario.includes('performance')) {",
              "    pm.test(`${description} - Performance Response Time`, function () {",
              "        pm.expect(pm.response.responseTime).to.be.below(2000);",
              "    });",
              "}",
              "",
              "console.log(`Test: ${testScenario}, Category Slug: ${categorySlug}, Expected: ${expectedStatus}, Actual: ${pm.response.code}`);"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {"key": "Accept", "value": "application/json"}
        ],
        "url": {
          "raw": "{{base_url}}/categories/tree{{query_params}}",
          "host": ["{{base_url}}"],
          "path": ["categories", "tree"],
          "query": "{{parsed_query}}"
        }
      }
    }
  ]
}
